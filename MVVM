#include <iostream>
#include <functional>

// Model
class CalculatorModel {
public:
    int add(int a, int b) const {
        return a + b;
    }
};

// ViewModel
class CalculatorViewModel {
private:
    CalculatorModel model;

public:
    std::function<void(int)> onResultUpdated;

    void addNumbers(int a, int b) {
        int result = model.add(a, b);
        if (onResultUpdated) {
            onResultUpdated(result);
        }
    }
};

// View
class CalculatorView {
private:
    CalculatorViewModel& viewModel;

public:
    CalculatorView(CalculatorViewModel& vm) : viewModel(vm) {
        // Register the callback for result updates
        viewModel.onResultUpdated = [this](int result) {
            displayResult(result);
        };
    }

    void start() {
        int num1, num2;
        std::cout << "Enter the first number: ";
        std::cin >> num1;

        std::cout << "Enter the second number: ";
        std::cin >> num2;

        viewModel.addNumbers(num1, num2);
    }

    void displayResult(int result) {
        std::cout << "Result: " << result << std::endl;
    }
};

// Main function
int main() {
    // Instantiate the ViewModel and View
    CalculatorViewModel viewModel;
    CalculatorView view(viewModel);

    // Start the application
    view.start();

    return 0;
}
